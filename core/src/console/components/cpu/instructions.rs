use crate::console::components::cpu::registers::{R16, R16S, R8};
use std::fmt::{Display, Formatter};

#[derive(Debug, Default, Copy, Clone)]
pub enum CPUInstruction {
    #[default]
    NoOp,
    Halt,
    AddR8(R8),
    AddR16(R16),
    SubR8(R8),
    SubR16(R16),
    LoadR8((R8, R8)),
    LoadR16((R16, R16)),
    LoadR8i(R8),
    LoadR16i(R16),
    IncR8(R8),
    IncR16(R16),
    DecR8(R8),
    DecR16(R16),
    Push(R16S),
    Pop(R16S),
    EnableInterrupts,
    DisableInterrupts,
    Call,
    Return,
}

impl CPUInstruction {
    pub fn byte_count(&self) -> usize {
        match self {
            Self::NoOp
            | Self::Halt
            | Self::AddR8(_)
            | Self::AddR16(_)
            | Self::SubR8(_)
            | Self::SubR16(_)
            | Self::LoadR8(_)
            | Self::LoadR16(_)
            | Self::IncR8(_)
            | Self::IncR16(_)
            | Self::DecR8(_)
            | Self::DecR16(_)
            | Self::Push(_)
            | Self::Pop(_)
            | Self::EnableInterrupts
            | Self::DisableInterrupts
            | Self::Return => 1,
            Self::LoadR8i(_) => 2,
            Self::LoadR16i(_) | Self::Call => 3,
        }
    }
}

impl From<u8> for CPUInstruction {
    fn from(value: u8) -> Self {
        match value {
            0x00 => CPUInstruction::NoOp,
            0x01 => CPUInstruction::EnableInterrupts,
            0x02 => CPUInstruction::Call,
            0x04 => CPUInstruction::AddR16(R16::BC),
            0x05 => CPUInstruction::AddR16(R16::DE),
            0x06 => CPUInstruction::AddR16(R16::HL),
            0x07 => CPUInstruction::AddR16(R16::SP),
            0x08 => CPUInstruction::AddR8(R8::A),
            0x09 => CPUInstruction::AddR8(R8::B),
            0x0A => CPUInstruction::AddR8(R8::C),
            0x0B => CPUInstruction::AddR8(R8::D),
            0x0C => CPUInstruction::AddR8(R8::E),
            0x0D => CPUInstruction::AddR8(R8::H),
            0x0E => CPUInstruction::AddR8(R8::L),
            0x0F => CPUInstruction::AddR8(R8::HL),
            0x10 => CPUInstruction::Halt,
            0x11 => CPUInstruction::DisableInterrupts,
            0x12 => CPUInstruction::Return,
            0x14 => CPUInstruction::SubR16(R16::BC),
            0x15 => CPUInstruction::SubR16(R16::DE),
            0x16 => CPUInstruction::SubR16(R16::HL),
            0x17 => CPUInstruction::SubR16(R16::SP),
            0x18 => CPUInstruction::SubR8(R8::A),
            0x19 => CPUInstruction::SubR8(R8::B),
            0x1A => CPUInstruction::SubR8(R8::C),
            0x1B => CPUInstruction::SubR8(R8::D),
            0x1C => CPUInstruction::SubR8(R8::E),
            0x1D => CPUInstruction::SubR8(R8::H),
            0x1E => CPUInstruction::SubR8(R8::L),
            0x1F => CPUInstruction::SubR8(R8::HL),
            0x20 => CPUInstruction::LoadR8((R8::A, R8::B)),
            0x21 => CPUInstruction::LoadR8((R8::A, R8::C)),
            0x22 => CPUInstruction::LoadR8((R8::A, R8::D)),
            0x23 => CPUInstruction::LoadR8((R8::A, R8::E)),
            0x24 => CPUInstruction::LoadR8((R8::A, R8::H)),
            0x25 => CPUInstruction::LoadR8((R8::A, R8::L)),
            0x26 => CPUInstruction::LoadR8((R8::A, R8::HL)),
            0x27 => CPUInstruction::LoadR8((R8::B, R8::A)),
            0x28 => CPUInstruction::LoadR8((R8::B, R8::C)),
            0x29 => CPUInstruction::LoadR8((R8::B, R8::D)),
            0x2A => CPUInstruction::LoadR8((R8::B, R8::E)),
            0x2B => CPUInstruction::LoadR8((R8::B, R8::H)),
            0x2C => CPUInstruction::LoadR8((R8::B, R8::L)),
            0x2D => CPUInstruction::LoadR8((R8::B, R8::HL)),
            0x2E => CPUInstruction::LoadR8((R8::C, R8::A)),
            0x2F => CPUInstruction::LoadR8((R8::C, R8::B)),
            0x30 => CPUInstruction::LoadR8((R8::C, R8::D)),
            0x31 => CPUInstruction::LoadR8((R8::C, R8::E)),
            0x32 => CPUInstruction::LoadR8((R8::C, R8::H)),
            0x33 => CPUInstruction::LoadR8((R8::C, R8::L)),
            0x34 => CPUInstruction::LoadR8((R8::C, R8::HL)),
            0x35 => CPUInstruction::LoadR8((R8::D, R8::A)),
            0x36 => CPUInstruction::LoadR8((R8::D, R8::B)),
            0x37 => CPUInstruction::LoadR8((R8::D, R8::C)),
            0x38 => CPUInstruction::LoadR8((R8::D, R8::E)),
            0x39 => CPUInstruction::LoadR8((R8::D, R8::H)),
            0x3A => CPUInstruction::LoadR8((R8::D, R8::L)),
            0x3B => CPUInstruction::LoadR8((R8::D, R8::HL)),
            0x3C => CPUInstruction::LoadR8((R8::E, R8::A)),
            0x3D => CPUInstruction::LoadR8((R8::E, R8::B)),
            0x3E => CPUInstruction::LoadR8((R8::E, R8::C)),
            0x3F => CPUInstruction::LoadR8((R8::E, R8::D)),
            0x40 => CPUInstruction::LoadR8((R8::E, R8::H)),
            0x41 => CPUInstruction::LoadR8((R8::E, R8::L)),
            0x42 => CPUInstruction::LoadR8((R8::E, R8::HL)),
            0x43 => CPUInstruction::LoadR8((R8::H, R8::A)),
            0x44 => CPUInstruction::LoadR8((R8::H, R8::B)),
            0x45 => CPUInstruction::LoadR8((R8::H, R8::C)),
            0x46 => CPUInstruction::LoadR8((R8::H, R8::D)),
            0x47 => CPUInstruction::LoadR8((R8::H, R8::E)),
            0x48 => CPUInstruction::LoadR8((R8::H, R8::L)),
            0x49 => CPUInstruction::LoadR8((R8::H, R8::HL)),
            0x4A => CPUInstruction::LoadR8((R8::L, R8::A)),
            0x4B => CPUInstruction::LoadR8((R8::L, R8::B)),
            0x4C => CPUInstruction::LoadR8((R8::L, R8::C)),
            0x4D => CPUInstruction::LoadR8((R8::L, R8::D)),
            0x4E => CPUInstruction::LoadR8((R8::L, R8::E)),
            0x4F => CPUInstruction::LoadR8((R8::L, R8::H)),
            0x50 => CPUInstruction::LoadR8((R8::L, R8::HL)),
            0x51 => CPUInstruction::LoadR8((R8::HL, R8::A)),
            0x52 => CPUInstruction::LoadR8((R8::HL, R8::B)),
            0x53 => CPUInstruction::LoadR8((R8::HL, R8::C)),
            0x54 => CPUInstruction::LoadR8((R8::HL, R8::D)),
            0x55 => CPUInstruction::LoadR8((R8::HL, R8::E)),
            0x56 => CPUInstruction::LoadR8((R8::HL, R8::H)),
            0x57 => CPUInstruction::LoadR8((R8::HL, R8::L)),
            0x58 => CPUInstruction::LoadR16((R16::BC, R16::DE)),
            0x59 => CPUInstruction::LoadR16((R16::BC, R16::HL)),
            0x5A => CPUInstruction::LoadR16((R16::BC, R16::SP)),
            0x5B => CPUInstruction::LoadR16((R16::DE, R16::BC)),
            0x5C => CPUInstruction::LoadR16((R16::DE, R16::HL)),
            0x5D => CPUInstruction::LoadR16((R16::DE, R16::SP)),
            0x5E => CPUInstruction::LoadR16((R16::HL, R16::BC)),
            0x5F => CPUInstruction::LoadR16((R16::HL, R16::DE)),
            0x60 => CPUInstruction::LoadR16((R16::HL, R16::SP)),
            0x61 => CPUInstruction::LoadR16((R16::SP, R16::BC)),
            0x62 => CPUInstruction::LoadR16((R16::SP, R16::DE)),
            0x63 => CPUInstruction::LoadR16((R16::SP, R16::HL)),
            0x64 => CPUInstruction::LoadR16i(R16::BC),
            0x65 => CPUInstruction::LoadR16i(R16::DE),
            0x66 => CPUInstruction::LoadR16i(R16::HL),
            0x67 => CPUInstruction::LoadR16i(R16::SP),
            0x68 => CPUInstruction::LoadR8i(R8::A),
            0x69 => CPUInstruction::LoadR8i(R8::B),
            0x6A => CPUInstruction::LoadR8i(R8::C),
            0x6B => CPUInstruction::LoadR8i(R8::D),
            0x6C => CPUInstruction::LoadR8i(R8::E),
            0x6D => CPUInstruction::LoadR8i(R8::H),
            0x6E => CPUInstruction::LoadR8i(R8::L),
            0x6F => CPUInstruction::LoadR8i(R8::HL),
            0x70 => CPUInstruction::IncR16(R16::BC),
            0x71 => CPUInstruction::IncR16(R16::DE),
            0x72 => CPUInstruction::IncR16(R16::HL),
            0x73 => CPUInstruction::IncR16(R16::SP),
            0x74 => CPUInstruction::DecR16(R16::BC),
            0x75 => CPUInstruction::DecR16(R16::DE),
            0x76 => CPUInstruction::DecR16(R16::HL),
            0x77 => CPUInstruction::DecR16(R16::SP),
            0x78 => CPUInstruction::IncR8(R8::A),
            0x79 => CPUInstruction::IncR8(R8::B),
            0x7A => CPUInstruction::IncR8(R8::C),
            0x7B => CPUInstruction::IncR8(R8::D),
            0x7C => CPUInstruction::IncR8(R8::E),
            0x7D => CPUInstruction::IncR8(R8::H),
            0x7E => CPUInstruction::IncR8(R8::L),
            0x7F => CPUInstruction::IncR8(R8::HL),
            0x80 => CPUInstruction::Push(R16S::AF),
            0x81 => CPUInstruction::Push(R16S::BC),
            0x82 => CPUInstruction::Push(R16S::DE),
            0x83 => CPUInstruction::Push(R16S::HL),
            0x84 => CPUInstruction::Pop(R16S::AF),
            0x85 => CPUInstruction::Pop(R16S::BC),
            0x86 => CPUInstruction::Pop(R16S::DE),
            0x87 => CPUInstruction::Pop(R16S::HL),
            0x88 => CPUInstruction::DecR8(R8::A),
            0x89 => CPUInstruction::DecR8(R8::B),
            0x8A => CPUInstruction::DecR8(R8::C),
            0x8B => CPUInstruction::DecR8(R8::D),
            0x8C => CPUInstruction::DecR8(R8::E),
            0x8D => CPUInstruction::DecR8(R8::H),
            0x8E => CPUInstruction::DecR8(R8::L),
            0x8F => CPUInstruction::DecR8(R8::HL),
            _ => CPUInstruction::NoOp,
        }
    }
}

impl TryFrom<CPUInstruction> for u8 {
    type Error = String;

    fn try_from(instruction: CPUInstruction) -> Result<u8, String> {
        let value = match instruction {
            CPUInstruction::NoOp => 0x00,
            CPUInstruction::EnableInterrupts => 0x01,
            CPUInstruction::Call => 0x02,
            CPUInstruction::Halt => 0x10,
            CPUInstruction::DisableInterrupts => 0x11,
            CPUInstruction::Return => 0x12,
            CPUInstruction::AddR16(r16) => match r16 {
                R16::BC => 0x04,
                R16::DE => 0x05,
                R16::HL => 0x06,
                R16::SP => 0x07,
            },
            CPUInstruction::AddR8(r8) => match r8 {
                R8::A => 0x08,
                R8::B => 0x09,
                R8::C => 0x0A,
                R8::D => 0x0B,
                R8::E => 0x0C,
                R8::H => 0x0D,
                R8::L => 0x0E,
                R8::HL => 0x0F,
            },
            CPUInstruction::SubR16(r16) => match r16 {
                R16::BC => 0x14,
                R16::DE => 0x15,
                R16::HL => 0x16,
                R16::SP => 0x17,
            },
            CPUInstruction::SubR8(r8) => match r8 {
                R8::A => 0x18,
                R8::B => 0x19,
                R8::C => 0x1A,
                R8::D => 0x1B,
                R8::E => 0x1C,
                R8::H => 0x1D,
                R8::L => 0x1E,
                R8::HL => 0x1F,
            },
            CPUInstruction::LoadR8((r1, r2)) => match (r1, r2) {
                (R8::A, R8::B) => 0x20,
                (R8::A, R8::C) => 0x21,
                (R8::A, R8::D) => 0x22,
                (R8::A, R8::E) => 0x23,
                (R8::A, R8::H) => 0x24,
                (R8::A, R8::L) => 0x25,
                (R8::A, R8::HL) => 0x26,
                (R8::B, R8::A) => 0x27,
                (R8::B, R8::C) => 0x28,
                (R8::B, R8::D) => 0x29,
                (R8::B, R8::E) => 0x2A,
                (R8::B, R8::H) => 0x2B,
                (R8::B, R8::L) => 0x2C,
                (R8::B, R8::HL) => 0x2D,
                (R8::C, R8::A) => 0x2E,
                (R8::C, R8::B) => 0x2F,
                (R8::C, R8::D) => 0x30,
                (R8::C, R8::E) => 0x31,
                (R8::C, R8::H) => 0x32,
                (R8::C, R8::L) => 0x33,
                (R8::C, R8::HL) => 0x34,
                (R8::D, R8::A) => 0x35,
                (R8::D, R8::B) => 0x36,
                (R8::D, R8::C) => 0x37,
                (R8::D, R8::E) => 0x38,
                (R8::D, R8::H) => 0x39,
                (R8::D, R8::L) => 0x3A,
                (R8::D, R8::HL) => 0x3B,
                (R8::E, R8::A) => 0x3C,
                (R8::E, R8::B) => 0x3D,
                (R8::E, R8::C) => 0x3E,
                (R8::E, R8::D) => 0x3F,
                (R8::E, R8::H) => 0x40,
                (R8::E, R8::L) => 0x41,
                (R8::E, R8::HL) => 0x42,
                (R8::H, R8::A) => 0x43,
                (R8::H, R8::B) => 0x44,
                (R8::H, R8::C) => 0x45,
                (R8::H, R8::D) => 0x46,
                (R8::H, R8::E) => 0x47,
                (R8::H, R8::L) => 0x48,
                (R8::H, R8::HL) => 0x49,
                (R8::L, R8::A) => 0x4A,
                (R8::L, R8::B) => 0x4B,
                (R8::L, R8::C) => 0x4C,
                (R8::L, R8::D) => 0x4D,
                (R8::L, R8::E) => 0x4E,
                (R8::L, R8::H) => 0x4F,
                (R8::L, R8::HL) => 0x50,
                (R8::HL, R8::A) => 0x51,
                (R8::HL, R8::B) => 0x52,
                (R8::HL, R8::C) => 0x53,
                (R8::HL, R8::D) => 0x54,
                (R8::HL, R8::E) => 0x55,
                (R8::HL, R8::H) => 0x56,
                (R8::HL, R8::L) => 0x57,
                _ => return Err(format!("Can't load {r1:?} from {r2:?}")),
            },
            CPUInstruction::LoadR16((r1, r2)) => match (r1, r2) {
                (R16::BC, R16::DE) => 0x58,
                (R16::BC, R16::HL) => 0x59,
                (R16::BC, R16::SP) => 0x5A,
                (R16::DE, R16::BC) => 0x5B,
                (R16::DE, R16::HL) => 0x5C,
                (R16::DE, R16::SP) => 0x5D,
                (R16::HL, R16::BC) => 0x5E,
                (R16::HL, R16::DE) => 0x5F,
                (R16::HL, R16::SP) => 0x60,
                (R16::SP, R16::BC) => 0x61,
                (R16::SP, R16::DE) => 0x62,
                (R16::SP, R16::HL) => 0x63,
                _ => return Err(format!("Can't load {r1:?} from {r2:?}")),
            },
            CPUInstruction::LoadR16i(r16) => match r16 {
                R16::BC => 0x64,
                R16::DE => 0x65,
                R16::HL => 0x66,
                R16::SP => 0x67,
            },
            CPUInstruction::LoadR8i(r8) => match r8 {
                R8::A => 0x68,
                R8::B => 0x69,
                R8::C => 0x6A,
                R8::D => 0x6B,
                R8::E => 0x6C,
                R8::H => 0x6D,
                R8::L => 0x6E,
                R8::HL => 0x6F,
            },
            CPUInstruction::IncR16(r16) => match r16 {
                R16::BC => 0x70,
                R16::DE => 0x71,
                R16::HL => 0x72,
                R16::SP => 0x73,
            },
            CPUInstruction::DecR16(r16) => match r16 {
                R16::BC => 0x74,
                R16::DE => 0x75,
                R16::HL => 0x76,
                R16::SP => 0x77,
            },
            CPUInstruction::IncR8(r8) => match r8 {
                R8::A => 0x78,
                R8::B => 0x79,
                R8::C => 0x7A,
                R8::D => 0x7B,
                R8::E => 0x7C,
                R8::H => 0x7D,
                R8::L => 0x7E,
                R8::HL => 0x7F,
            },
            CPUInstruction::Push(r16s) => match r16s {
                R16S::AF => 0x80,
                R16S::BC => 0x81,
                R16S::DE => 0x82,
                R16S::HL => 0x83,
            },
            CPUInstruction::Pop(r16s) => match r16s {
                R16S::AF => 0x84,
                R16S::BC => 0x85,
                R16S::DE => 0x86,
                R16S::HL => 0x87,
            },
            CPUInstruction::DecR8(r8) => match r8 {
                R8::A => 0x88,
                R8::B => 0x89,
                R8::C => 0x8A,
                R8::D => 0x8B,
                R8::E => 0x8C,
                R8::H => 0x8D,
                R8::L => 0x8E,
                R8::HL => 0x8F,
            },
        };

        Ok(value)
    }
}

impl Display for CPUInstruction {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::NoOp => write!(f, "NOP"),
            Self::Halt => write!(f, "HLT"),
            Self::AddR8(r8) => write!(f, "ADD {r8}"),
            Self::AddR16(r16) => write!(f, "ADD {r16}"),
            Self::SubR8(r8) => write!(f, "SUB {r8}"),
            Self::SubR16(r16) => write!(f, "SUB {r16}"),
            Self::LoadR8((r1, r2)) => write!(f, "LD {r1}, {r2}"),
            Self::LoadR16((r1, r2)) => write!(f, "LD {r1}, {r2}"),
            Self::LoadR8i(r8) => write!(f, "LD {r8}, n"),
            Self::LoadR16i(r16) => write!(f, "LD {r16}, nn"),
            Self::IncR8(r8) => write!(f, "INC {r8}"),
            Self::IncR16(r16) => write!(f, "INC {r16}"),
            Self::DecR8(r8) => write!(f, "DEC {r8}"),
            Self::DecR16(r16) => write!(f, "DEC {r16}"),
            Self::Push(r16s) => write!(f, "PUSH {r16s}"),
            Self::Pop(r16s) => write!(f, "POP {r16s}"),
            Self::EnableInterrupts => write!(f, "EI"),
            Self::DisableInterrupts => write!(f, "DI"),
            Self::Call => write!(f, "CALL"),
            Self::Return => write!(f, "RET"),
        }
    }
}
